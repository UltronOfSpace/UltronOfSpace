definition(
    name: "Simple Zen32 Button LED and Device Sync Child App",
    namespace: "UltronOfSpace",
    parent: "UltronOfSpace:Simple Zen32 Button LED and Device Sync",
    author: "Ultronumus Of Space",
    description: "Synchronizes Z32 LED states to end devices",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: ""
)

/**
 * Main preferences page
 */
preferences {
    page(name: "mainPage", install: true, uninstall: true)
}

/**
 * Builds the main settings page
 */
def mainPage() {
    dynamicPage(name: "mainPage", install: true, uninstall: true) {
        // Introduction section
        section {
            paragraph "<h1 style='text-align: center;'>This app helps you synchronize LED colors and states for your Zen32 buttons.</h1>"
            paragraph "<div style='display:flex; align-items:center; justify-content: center;'>"
            paragraph "<img src='https://raw.githubusercontent.com/rdstov/UltronOfSpace/refs/heads/main/Hubitat/Apps%20Code/Zen32%20Coordinator/Images/Zen32_Btns.png' style='width:200px;height:auto;margin-right:10px;'/>"
            paragraph "<h1>Configure your settings below</h1></div>"
        }

        // Device selection section
        section("<h1>Zooz Zen32 Selection</h1>") {
            paragraph "Select the Zooz Zen32 device you want to use"
            input name: "ZoozZen32", type: "capability.button", title: "Zooz Zen32 Device", multiple: false
        }

        // Global vs Individual settings
        section("<h1>Global vs Individual Settings</h1>") {
            paragraph "Choose whether to use global settings for all buttons or the individual settings for each button."
            input name: "useGlobalSettings", type: "bool", title: "Use Global Settings for All Buttons?", defaultValue: false, submitOnChange: true
        }

        // Global settings
        if (useGlobalSettings) {
            globalSettingsSection()
        }

        // Button configuration
        buttonsConfigurationSection()

        // Logging toggle
        loggingSection()

        // Footer section
        footerSection()
    }
}

/**
 * Global settings section
 */
def globalSettingsSection() {
    section("<h1>Options to Set All Buttons</h1>") {
        paragraph "Use the options below to set a single color or brightness for all buttons based on its sync device state (On or Off)."
        paragraph "This will override individual button selections."

        // Define brightness options as a Map
        def brightnessOptions = ["Low":30, "Medium":60, "High":100]

        // When device is ON
        paragraph "<h3> When device synced to the button is ON </h3>"
        input name: "setAllOnColor", type: "enum", title: "LED Color will be...", options: ["red", "white", "blue"], required: false
        input name: "setAllOnBrightness", type: "enum", title: "LED Brightness will be...", options: brightnessOptions.keySet(), required: false, defaultValue: "High"

        // When device is OFF
        paragraph "<h3> When device synced to the button is OFF </h3>"
        input name: "setAllOffColor", type: "enum", title: "LED Color will be...", options: ["red", "white", "blue"], required: false
        input name: "setAllOffBrightness", type: "enum", title: "LED Brightness will be...", options: brightnessOptions.keySet(), required: false, defaultValue: "Low"
    }
}

/**
 * Buttons configuration section
 */
def buttonsConfigurationSection() {
    section("<h1>Sync Device Selection</h1>") {
        paragraph "Select the devices to sync each button to. Single Device Selection only. Only one device or device group can be selected per button."

        // Define common options
        def colorOptions = ["red", "white", "blue"]
        // Brightness options as a Map
        def brightnessOptions = ["Low":30, "Medium":60, "High":100]
        def actionOptions = ["Toggle", "Switch On", "Switch Off"]
        def availableActions = ["Held", "Double-Tapped", "Released"]

        // Loop through each button
        for (int i = 1; i <= 5; i++) {
            configureButton(i, colorOptions, brightnessOptions, actionOptions, availableActions)
        }
    }
}

/**
 * Configures individual button settings
 */
def configureButton(int i, def colorOptions, def brightnessOptions, def actionOptions, def availableActions) {
    paragraph "<div style='display:flex; align-items:center;'>"
    paragraph "<img src='https://raw.githubusercontent.com/rdstov/UltronOfSpace/refs/heads/main/Hubitat/Apps%20Code/Zen32%20Coordinator/Images/Zen32_Btn${i}.png' style='width:200px;height:auto;margin-right:10px;'/>"
    paragraph "<h1>Button $i</h1></div>"

    input name: "Button${i}SyncToDevice", type: "capability.switch", title: "Synchronize Button $i LED to this Device or Group State", multiple: false
    input name: "Button${i}Action", type: "enum", title: "Select the action when the button is pressed", required: false, options: actionOptions
    input name: "Button${i}SelectedActions", type: "enum", title: "Select additional button actions to configure for Button ${i}", multiple: true, options: availableActions, submitOnChange: true

    // Configure additional actions
    configureAdditionalActions(i, actionOptions)

    // Individual LED settings
    if (!useGlobalSettings) {
        configureIndividualLEDSettings(i, colorOptions, brightnessOptions)
    }
}

/**
 * Configures additional actions for a button
 */
def configureAdditionalActions(int i, def actionOptions) {
    def selectedActions = settings["Button${i}SelectedActions"] ?: []

    // Held action
    if (selectedActions.contains("Held")) {
        paragraph "<H2>Button ${i} Held</H2>"
        input name: "Button${i}HeldDevice", type: "capability.switch", title: "Select device to control when you HOLD Button ${i}", required: true, submitOnChange: true
        input name: "Button${i}HeldAction", type: "enum", title: "Select the action when Button ${i} is held", required: true, options: actionOptions
    } else {
        app.removeSetting("Button${i}HeldDevice")
    }

    // Double-Tapped action
    if (selectedActions.contains("Double-Tapped")) {
        paragraph "<H2>Button ${i} Double-Tapped</H2>"
        input name: "Button${i}DoubleTappedDevice", type: "capability.switch", title: "Select device to control when you DOUBLE-TAP Button ${i}", required: true, submitOnChange: true
        input name: "Button${i}DoubleTappedAction", type: "enum", title: "Select the action when Button ${i} is double-tapped", required: true, options: actionOptions
    } else {
        app.removeSetting("Button${i}DoubleTappedDevice")
    }

    // Released action
    if (selectedActions.contains("Released")) {
        paragraph "<H2>Button ${i} Released</H2>"
        input name: "Button${i}ReleasedDevice", type: "capability.switch", title: "Select device to control when you RELEASE Button ${i}", required: true, submitOnChange: true
        input name: "Button${i}ReleasedAction", type: "enum", title: "Select the action when Button ${i} is released", required: true, options: actionOptions
    } else {
        app.removeSetting("Button${i}ReleasedDevice")
    }
}

/**
 * Configures individual LED settings for a button
 */
def configureIndividualLEDSettings(int i, def colorOptions, def brightnessOptions) {
    paragraph "<h3> When ON </h3>"
    input name: "Button${i}LEDOnColor", type: "enum", title: "Select the color for the LED when sync device is ON", required: true, defaultValue: "white", options: colorOptions
    input name: "Button${i}LEDOnBrightness", type: "enum", title: "Select the brightness for the LED when sync device is ON", required: true, defaultValue: "High", options: brightnessOptions.keySet()

    paragraph "<h3> When OFF </h3>"
    input name: "Button${i}LEDOffColor", type: "enum", title: "Select the color for the LED when sync device is OFF", required: true, defaultValue: "blue", options: colorOptions
    input name: "Button${i}LEDOffBrightness", type: "enum", title: "Select the brightness for the LED when sync device is OFF", required: true, defaultValue: "Low", options: brightnessOptions.keySet()
}

/**
 * Logging section
 */
def loggingSection() {
    section("Logging") {
        input name: "enableLogging", type: "bool", title: "Enable Debug Logging?", defaultValue: false
    }
}

/**
 * Footer section with credits
 */
def footerSection() {
    section {
        paragraph "<h1 style='text-align: center;'>Ultron Of Space Loves You!</h1>"
        paragraph "<div style='text-align: center;'>"
        paragraph "<img src='https://raw.githubusercontent.com/rdstov/UltronOfSpace/main/UltonOfSpaceIcon.jpg' style='width:300px;height:auto;margin: 0 auto;' />"
        paragraph "</div>"
    }
}

/**
 * Synchronizes individual button settings with global settings
 */
def synchronizeButtonSettings() {
    if (settings.useGlobalSettings) {
        for (int i = 1; i <= 5; i++) {
            def globalOnColor = settings.setAllOnColor ?: "white"
            def globalOffColor = settings.setAllOffColor ?: "blue"
            def globalOnBrightness = settings.setAllOnBrightness ?: "High"
            def globalOffBrightness = settings.setAllOffBrightness ?: "Low"

            // Update settings in the app's preferences
            app.updateSetting("Button${i}LEDOnColor", [type: "enum", value: globalOnColor])
            app.updateSetting("Button${i}LEDOffColor", [type: "enum", value: globalOffColor])
            app.updateSetting("Button${i}LEDOnBrightness", [type: "enum", value: globalOnBrightness])
            app.updateSetting("Button${i}LEDOffBrightness", [type: "enum", value: globalOffBrightness])

            // Store in state for persistent background tracking
            state."Button${i}LEDOnColor" = globalOnColor
            state."Button${i}LEDOffColor" = globalOffColor
            state."Button${i}LEDOnBrightness" = globalOnBrightness
            state."Button${i}LEDOffBrightness" = globalOffBrightness
        }
    }
}

/**
 * Called when the app is updated
 */
def updated() {
    debugLog("Updated")
    unsubscribe()
    subscribeToEvents()
    synchronizeButtonSettings()
    updateDeviceLEDs()
}

/**
 * Called when the app is installed
 */
def installed() {
    debugLog("Installed")
    subscribeToEvents()
    updateDeviceLEDs()
}

/**
 * Subscribes to relevant events
 */
def subscribeToEvents() {
    // Subscribe to ZoozZen32 button events
    if (ZoozZen32) {
        debugLog("Subscribing to ZoozZen32 button events")
        subscribe(ZoozZen32, "pushed", "buttonEventHandler")
        subscribe(ZoozZen32, "held", "buttonEventHandler")
        subscribe(ZoozZen32, "doubleTapped", "buttonEventHandler")
        subscribe(ZoozZen32, "released", "buttonEventHandler")
    } else {
        log.warn "ZoozZen32 device is not selected."
    }

    // Subscribe to device switch events
    for (int i = 1; i <= 5; i++) {
        subscribeToDeviceSwitchEvents(i)
    }
}

/**
 * Subscribes to switch events for a button's devices
 */
def subscribeToDeviceSwitchEvents(int i) {
    def syncDevice = settings."Button${i}SyncToDevice"
    if (syncDevice) {
        debugLog("Subscribing to sync device ${syncDevice} for Button $i")
        subscribe(syncDevice, "switch", "Button${i}SyncHandler")
    } else {
        log.warn "Button $i sync device is not selected."
    }

    def heldDevice = settings."Button${i}HeldDevice"
    if (heldDevice) {
        debugLog("Subscribing to held device ${heldDevice} for Button $i")
        subscribe(heldDevice, "switch", "Button${i}HeldDeviceSwitchHandler")
    }

    def doubleTappedDevice = settings."Button${i}DoubleTappedDevice"
    if (doubleTappedDevice) {
        debugLog("Subscribing to double-tapped device ${doubleTappedDevice} for Button $i")
        subscribe(doubleTappedDevice, "switch", "Button${i}DoubleTappedDeviceSwitchHandler")
    }

    def releasedDevice = settings."Button${i}ReleasedDevice"
    if (releasedDevice) {
        debugLog("Subscribing to released device ${releasedDevice} for Button $i")
        subscribe(releasedDevice, "switch", "Button${i}ReleasedDeviceSwitchHandler")
    }
}

/**
 * Updates the LED states based on device states
 */
def updateDeviceLEDs() {
    boolean useGlobal = settings.useGlobalSettings ?: false
    def brightnessOptions = ["Low":30, "Medium":60, "High":100] // Define here for scope

    for (int i = 1; i <= 5; i++) {
        updateButtonLEDState(i, useGlobal, brightnessOptions)
    }
}

/**
 * Updates the LED state for a specific button
 */
def updateButtonLEDState(int i, boolean useGlobal, def brightnessOptions) {
    def deviceStates = collectDeviceStates(i)

    if (deviceStates) {
        def deviceState = deviceStates.contains("on") ? "on" : "off"
        debugLog("Button $i - Combined device state is: ${deviceState}")

        // Determine LED settings
        def onColor = useGlobal ? settings.setAllOnColor : settings."Button${i}LEDOnColor"
        def offColor = useGlobal ? settings.setAllOffColor : settings."Button${i}LEDOffColor"

        def onBrightnessLabel = useGlobal ? settings.setAllOnBrightness : settings."Button${i}LEDOnBrightness"
        def offBrightnessLabel = useGlobal ? settings.setAllOffBrightness : settings."Button${i}LEDOffBrightness"

        // Map brightness labels to numerical values
        def onBrightness = brightnessOptions[onBrightnessLabel] ?: 100
        def offBrightness = brightnessOptions[offBrightnessLabel] ?: 30

        // Update the LED
        if (deviceState == "on") {
            debugLog("Setting LED for Button $i to ON color: ${onColor} with brightness: ${onBrightness}")
            ZoozZen32.setLED(i, onColor, onBrightness)
        } else {
            debugLog("Setting LED for Button $i to OFF color: ${offColor} with brightness: ${offBrightness}")
            ZoozZen32.setLED(i, offColor, offBrightness)
        }
    } else {
        log.warn "No devices selected for Button $i."
    }
}

/**
 * Collects the states of devices associated with a button
 */
def collectDeviceStates(int i) {
    def deviceStates = []
    def devices = [
        settings."Button${i}SyncToDevice",
        settings."Button${i}HeldDevice",
        settings."Button${i}DoubleTappedDevice",
        settings."Button${i}ReleasedDevice"
    ]

    devices.each { device ->
        if (device) {
            deviceStates << device.currentValue("switch")
        }
    }
    return deviceStates
}

/**
 * Updates the LED based on a device event
 */
def updateLEDForDevice(int buttonIndex, evt, String actionType) {
    boolean useGlobal = settings.useGlobalSettings ?: false
    def deviceState = evt.value
    def brightnessOptions = ["Low":30, "Medium":60, "High":100] // Define here for scope

    debugLog("Button $buttonIndex - Device state is: ${deviceState} for action ${actionType}")

    // Determine LED settings
    def onColor = useGlobal ? settings.setAllOnColor : settings."Button${buttonIndex}LEDOnColor"
    def offColor = useGlobal ? settings.setAllOffColor : settings."Button${buttonIndex}LEDOffColor"

    def onBrightnessLabel = useGlobal ? settings.setAllOnBrightness : settings."Button${buttonIndex}LEDOnBrightness"
    def offBrightnessLabel = useGlobal ? settings.setAllOffBrightness : settings."Button${buttonIndex}LEDOffBrightness"

    // Map brightness labels to numerical values
    def onBrightness = brightnessOptions[onBrightnessLabel] ?: 100
    def offBrightness = brightnessOptions[offBrightnessLabel] ?: 30

    // Update the LED
    if (deviceState == "on") {
        debugLog("Setting LED for Button $buttonIndex to ON color: ${onColor} with brightness: ${onBrightness}")
        ZoozZen32.setLED(buttonIndex, onColor, onBrightness)
    } else if (deviceState == "off") {
        debugLog("Setting LED for Button $buttonIndex to OFF color: ${offColor} with brightness: ${offBrightness}")
        ZoozZen32.setLED(buttonIndex, offColor, offBrightness)
    }
}

/**
 * Handles button sync events
 */
def ButtonSyncHandler(int buttonIndex, evt) {
    debugLog("Button ${buttonIndex} Sync Handler triggered with event value: ${evt.value}")
    updateLEDForDevice(buttonIndex, evt, "Sync")
}

// Button sync handlers
def Button1SyncHandler(evt) { ButtonSyncHandler(1, evt) }
def Button2SyncHandler(evt) { ButtonSyncHandler(2, evt) }
def Button3SyncHandler(evt) { ButtonSyncHandler(3, evt) }
def Button4SyncHandler(evt) { ButtonSyncHandler(4, evt) }
def Button5SyncHandler(evt) { ButtonSyncHandler(5, evt) }

// Held device switch handlers
def ButtonHeldDeviceSwitchHandler(int buttonIndex, evt) {
    debugLog("Button ${buttonIndex} Held Device Switch Handler triggered with event value: ${evt.value}")
    updateLEDForDevice(buttonIndex, evt, "Held")
}

def Button1HeldDeviceSwitchHandler(evt) { ButtonHeldDeviceSwitchHandler(1, evt) }
def Button2HeldDeviceSwitchHandler(evt) { ButtonHeldDeviceSwitchHandler(2, evt) }
def Button3HeldDeviceSwitchHandler(evt) { ButtonHeldDeviceSwitchHandler(3, evt) }
def Button4HeldDeviceSwitchHandler(evt) { ButtonHeldDeviceSwitchHandler(4, evt) }
def Button5HeldDeviceSwitchHandler(evt) { ButtonHeldDeviceSwitchHandler(5, evt) }

// Double-tapped device switch handlers
def ButtonDoubleTappedDeviceSwitchHandler(int buttonIndex, evt) {
    debugLog("Button ${buttonIndex} Double-Tapped Device Switch Handler triggered with event value: ${evt.value}")
    updateLEDForDevice(buttonIndex, evt, "DoubleTapped")
}

def Button1DoubleTappedDeviceSwitchHandler(evt) { ButtonDoubleTappedDeviceSwitchHandler(1, evt) }
def Button2DoubleTappedDeviceSwitchHandler(evt) { ButtonDoubleTappedDeviceSwitchHandler(2, evt) }
def Button3DoubleTappedDeviceSwitchHandler(evt) { ButtonDoubleTappedDeviceSwitchHandler(3, evt) }
def Button4DoubleTappedDeviceSwitchHandler(evt) { ButtonDoubleTappedDeviceSwitchHandler(4, evt) }
def Button5DoubleTappedDeviceSwitchHandler(evt) { ButtonDoubleTappedDeviceSwitchHandler(5, evt) }

// Released device switch handlers
def ButtonReleasedDeviceSwitchHandler(int buttonIndex, evt) {
    debugLog("Button ${buttonIndex} Released Device Switch Handler triggered with event value: ${evt.value}")
    updateLEDForDevice(buttonIndex, evt, "Released")
}

def Button1ReleasedDeviceSwitchHandler(evt) { ButtonReleasedDeviceSwitchHandler(1, evt) }
def Button2ReleasedDeviceSwitchHandler(evt) { ButtonReleasedDeviceSwitchHandler(2, evt) }
def Button3ReleasedDeviceSwitchHandler(evt) { ButtonReleasedDeviceSwitchHandler(3, evt) }
def Button4ReleasedDeviceSwitchHandler(evt) { ButtonReleasedDeviceSwitchHandler(4, evt) }
def Button5ReleasedDeviceSwitchHandler(evt) { ButtonReleasedDeviceSwitchHandler(5, evt) }

/**
 * Handles button events from ZoozZen32
 */
def buttonEventHandler(evt) {
    def buttonNumber = evt.value.toInteger()
    def actionType = evt.name

    debugLog("Button event received: Button ${buttonNumber}, Action ${actionType}")

    // Determine associated device and action
    def associatedDevice = null
    def action = null

    switch (actionType) {
        case "pushed":
            associatedDevice = settings."Button${buttonNumber}SyncToDevice"
            action = settings."Button${buttonNumber}Action"
            break
        case "held":
            associatedDevice = settings."Button${buttonNumber}HeldDevice"
            action = settings."Button${buttonNumber}HeldAction"
            break
        case "doubleTapped":
            associatedDevice = settings."Button${buttonNumber}DoubleTappedDevice"
            action = settings."Button${buttonNumber}DoubleTappedAction"
            break
        case "released":
            associatedDevice = settings."Button${buttonNumber}ReleasedDevice"
            action = settings."Button${buttonNumber}ReleasedAction"
            break
    }

    if (associatedDevice) {
        if (action) {
            infoLog("Button ${buttonNumber} ${actionType} action on device ${ZoozZen32.displayName}. Performing '${action}' on associated device: ${associatedDevice.displayName}.")
            performActionOnDevice(associatedDevice, action)
        } else {
            log.warn "No action defined for Button ${buttonNumber} ${actionType}."
        }
    } else {
        infoLog("Button ${buttonNumber} ${actionType} action on device ${ZoozZen32.displayName}. No device is currently associated to this button.")
    }
}

/**
 * Performs the specified action on the device
 */
def performActionOnDevice(def device, String action) {
    switch (action) {
        case "Toggle":
            device.currentValue("switch") == "on" ? device.off() : device.on()
            break
        case "Switch On":
            device.on()
            break
        case "Switch Off":
            device.off()
            break
        default:
            log.warn "Unknown action: ${action}"
    }
}

/**
 * Custom debug logging
 */
def debugLog(String msg) {
    if (settings.enableLogging) {
        log.debug msg
    }
}

/**
 * Custom info logging
 */
def infoLog(String msg) {
    if (settings.enableLogging) {
        log.info msg
    }
}
