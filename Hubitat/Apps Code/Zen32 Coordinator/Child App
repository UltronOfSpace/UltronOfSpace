definition(
    name: "Adaptive Lighting Child",
    namespace: "UltronOfSpace",
    parent: "UltronOfSpace:Adaptive Lighting Parent",
    author: "Ultonumus Of Space",
    description: "Child app for Adaptive Lighting configuration",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: ""
)

preferences {
    page(name: "mainPage", title: "Adaptive Lighting Child Setup", install: true, uninstall: true)
    page(name: "modeOverridesPage", title: "Mode Overrides")
    page(name: "sunSettingsPage", title: "Sunrise/Sunset Settings")
    page(name: "brightnessSettingsPage", title: "Brightness Settings")
    page(name: "colorTemperatureSettingsPage", title: "Color Temperature Settings")
    page(name: "dynamicAdjustmentsPage", title: "Dynamic Adjustments")
}

def mainPage() {
    dynamicPage(name: "mainPage") {
        section("Device Selection") {
            input "colorTemperatureDevices", "capability.colorTemperature", title: "Color Temperature Devices", multiple: true, required: false
            input "colorDevices", "capability.colorControl", title: "Color Devices", multiple: true, required: false
            input "dimmableDevices", "capability.switchLevel", title: "Dimmable Devices", multiple: true, required: false
        }
        section("Other Settings") {
            href "modeOverridesPage", title: "Mode Overrides", description: "Configure Mode Overrides"
            href "sunSettingsPage", title: "Sunrise/Sunset Settings", description: "Configure Sunrise/Sunset Settings"
            href "brightnessSettingsPage", title: "Brightness Settings", description: "Configure Brightness Settings"
            href "colorTemperatureSettingsPage", title: "Color Temperature Settings", description: "Configure Color Temperature Settings"
            href "dynamicAdjustmentsPage", title: "Dynamic Adjustments", description: "Configure Dynamic Adjustments"
        }
    }
}

def modeOverridesPage() {
    dynamicPage(name: "modeOverridesPage") {
        section("") {
            input "useModeOverridesBrightness", "bool", title: "Enable Mode Overrides for Brightness?", defaultValue: false, submitOnChange: true

            if (useModeOverridesBrightness) {
                input "modeOverridesBrightness", "mode", title: "Modes for Override (Brightness)", multiple: true, required: false, submitOnChange: true

                def selectedModesBrightness = modeOverridesBrightness?.findAll { it }
                if (selectedModesBrightness && !selectedModesBrightness.isEmpty()) {
                    selectedModesBrightness.each { mode ->
                        input "brightness_${mode}", "number", title: "Brightness Level for ${mode}", required: true, defaultValue: null
                    }
                }
            }

            input "useModeOverridesColorTemp", "bool", title: "Enable Mode Overrides for Color Temperature?", defaultValue: false, submitOnChange: true

            if (useModeOverridesColorTemp) {
                input "modeOverridesColorTemp", "mode", title: "Modes for Override (Color Temperature)", multiple: true, required: false, submitOnChange: true

                def selectedModesColorTemp = modeOverridesColorTemp?.findAll { it }
                if (selectedModesColorTemp && !selectedModesColorTemp.isEmpty()) {
                    selectedModesColorTemp.each { mode ->
                        input "colorTemp_${mode}", "number", title: "Color Temperature for ${mode}", required: true, defaultValue: null
                    }
                }
            }
        }
    }
}

def sunSettingsPage() {
    dynamicPage(name: "sunSettingsPage") {
        section("") {
            input "useSunOverrides", "bool", title: "Enable Sunrise/Sunset Overrides?", defaultValue: false, submitOnChange: true

            if (useSunOverrides) {
                input "sunriseOverride", "time", title: "Sunrise Override Time", required: true
                input "sunsetOverride", "time", title: "Sunset Override Time", required: true
            }

            input "useSunOffsets", "bool", title: "Enable Sunrise/Sunset Offsets?", defaultValue: false, submitOnChange: true

            if (useSunOffsets) {
                input "sunriseOffset", "number", title: "Sunrise Offset in Minutes", required: true
                input "sunsetOffset", "number", title: "Sunset Offset in Minutes", required: true
            }

            input "useBrightnessRange", "bool", title: "Enable Brightness Range?", defaultValue: false, submitOnChange: true

            if (useBrightnessRange) {
                input "minBrightness", "number", title: "Minimum Brightness", defaultValue: 0, required: true, range: "0..100"
                input "maxBrightness", "number", title: "Maximum Brightness", defaultValue: 100, required: true, range: "0..100"
            }
        }
    }
}

def brightnessSettingsPage() {
    dynamicPage(name: "brightnessSettingsPage") {
        section("Brightness Settings") {
            input "lightProfile", "enum", title: "Light Profile", options: ["Gradual", "Accelerated", "Delayed"], defaultValue: "Gradual"
            input "minBrightness", "number", title: "Minimum Brightness", defaultValue: 0, required: true, range: "0..100"
            input "maxBrightness", "number", title: "Maximum Brightness", defaultValue: 100, required: true, range: "1..100"
        }
    }
}

def colorTemperatureSettingsPage() {
    dynamicPage(name: "colorTemperatureSettingsPage") {
        section("Color Temperature Settings") {
            input "warmCT", "number", title: "Warmest Color Temperature (in Kelvins)", defaultValue: 2500, required: true, range: "2200..6000"
            input "coolCT", "number", title: "Coolest Color Temperature (in Kelvins)", defaultValue: 5000, required: true, range: "2200..6000"
        }
    }
}

def dynamicAdjustmentsPage() {
    dynamicPage(name: "dynamicAdjustmentsPage") {
        section("") {
            input "useDynamicAdjustments", "bool", title: "Enable Dynamic Adjustments?", defaultValue: false, submitOnChange: true

            if (useDynamicAdjustments) {
                input "brightenStart", "time", title: "Start Brightening Time", required: true
                input "brightenEnd", "time", title: "End Brightening Time", required: true
                input "dimStart", "time", title: "Start Dimming Time", required: true
                input "dimEnd", "time", title: "End Dimming Time", required: true
            }
        }
    }
}

def installed() {
    log.debug "Adaptive Lighting Child App Installed"
    initialize()
}

def updated() {
    log.debug "Adaptive Lighting Child App Settings Updated"
    unsubscribe()
    initialize()
}

def initialize() {
    checkModeOverrides()
    // Add any other initialization logic here
}

def checkModeOverrides() {
    checkBrightnessOverrides()
    checkColorTempOverrides()
}

def checkBrightnessOverrides() {
    if (useModeOverridesBrightness) {
        def selectedModes = modeOverridesBrightness?.findAll { it }
        if (!selectedModes || !selectedModes.any { settings["brightness_${it}"] != null }) {
            app.updateSetting("useModeOverridesBrightness", [value: false, type: "bool"])
        }
    }
}

def checkColorTempOverrides() {
    if (useModeOverridesColorTemp) {
        def selectedModes = modeOverridesColorTemp?.findAll { it }
        if (!selectedModes || !selectedModes.any { settings["colorTemp_${it}"] != null }) {
            app.updateSetting("useModeOverridesColorTemp", [value: false, type: "bool"])
        }
    }
}
